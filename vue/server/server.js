import express from 'express';
import sqlite3 from 'sqlite3';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3002;

// Middleware
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'database.db');
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
  }
});

// API Routes - –ø—Ä–æ—Å—Ç—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
app.get('/api/orders', (req, res) => {
  const sql = `SELECT * FROM –∑–∞–∫–∞–∑—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–ó–∞–∫–∞–∑—ã –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});

app.get('/api/clients', (req, res) => {
  const sql = `SELECT * FROM –∫–ª–∏–µ–Ω—Ç—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–ö–ª–∏–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});

app.get('/api/computers', (req, res) => {
  const sql = `SELECT * FROM –∫–æ–º–ø—å—é—Ç–µ—Ä`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–ö–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({ message: '–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', timestamp: new Date() });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
app.get('/api/employees', (req, res) => {
  const sql = `SELECT * FROM —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏
app.get('/api/services', (req, res) => {
  const sql = `SELECT * FROM —É—Å–ª—É–≥–∏`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —É—Å–ª—É–≥:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–£—Å–ª—É–≥ –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
app.get('/api/products', (req, res) => {
  const sql = `SELECT * FROM —Ç–æ–≤–∞—Ä—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', err);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', rows.length);
    res.json({ data: rows });
  });
});