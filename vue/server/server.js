import express from 'express';
import sqlite3 from 'sqlite3';
import cors from 'cors';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 3002;

// Middleware
app.use(cors());
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'database.db');
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
  } else {
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    db.all("SELECT name FROM sqlite_master WHERE type='table'", (err, tables) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', err);
      } else {
        console.log('üìä –¢–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ:', tables.map(t => t.name).join(', '));
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
        tables.forEach(table => {
          db.get(`SELECT COUNT(*) as count FROM ${table.name}`, (err, row) => {
            if (!err) {
              console.log(`   ${table.name}: ${row.count} –∑–∞–ø–∏—Å–µ–π`);
            }
          });
        });
      }
    });
  }
});

// API Routes

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã
app.get('/api/orders', (req, res) => {
  const sql = `SELECT * FROM –∑–∞–∫–∞–∑—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üì¶ API /orders: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
app.get('/api/clients', (req, res) => {
  const sql = `SELECT * FROM –∫–ª–∏–µ–Ω—Ç—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üë• API /clients: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã
app.get('/api/computers', (req, res) => {
  const sql = `SELECT * FROM –∫–æ–º–ø—å—é—Ç–µ—Ä`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üíª API /computers: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
app.get('/api/employees', (req, res) => {
  const sql = `SELECT * FROM —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üë®‚Äçüíº API /employees: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å–ª—É–≥–∏
app.get('/api/services', (req, res) => {
  const sql = `SELECT * FROM —É—Å–ª—É–≥–∏`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å–ª—É–≥:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üîß API /services: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
app.get('/api/products', (req, res) => {
  const sql = `SELECT * FROM —Ç–æ–≤–∞—Ä—ã`;
  db.all(sql, [], (err, rows) => {
    if (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', err.message);
      res.status(400).json({ error: err.message });
      return;
    }
    console.log('üõí API /products: –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ', rows.length, '–∑–∞–ø–∏—Å–µ–π');
    res.json({ data: rows });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
app.get('/api/stats', (req, res) => {
  const queries = {
    totalOrders: 'SELECT COUNT(*) as count FROM –∑–∞–∫–∞–∑—ã',
    totalRevenue: 'SELECT SUM(—Å—Ç–æ–∏–º–æ—Å—Ç—å_–∑–∞–∫–∞–∑–∞) as total FROM –∑–∞–∫–∞–∑—ã',
    totalClients: 'SELECT COUNT(*) as count FROM –∫–ª–∏–µ–Ω—Ç—ã',
    totalEmployees: 'SELECT COUNT(*) as count FROM —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'
  };

  const results = {};
  let completed = 0;

  Object.keys(queries).forEach(key => {
    db.get(queries[key], [], (err, row) => {
      if (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ${key}:`, err.message);
        results[key] = 0;
      } else {
        results[key] = row.count || row.total || 0;
      }
      completed++;
      if (completed === Object.keys(queries).length) {
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', results);
        res.json(results);
      }
    });
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint
app.get('/api/test', (req, res) => {
  res.json({ 
    message: '‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    timestamp: new Date(),
    endpoints: [
      '/api/orders',
      '/api/clients', 
      '/api/computers',
      '/api/employees',
      '/api/services',
      '/api/products',
      '/api/stats'
    ]
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
  console.log(`üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:`);
  console.log(`   http://localhost:${PORT}/api/orders`);
  console.log(`   http://localhost:${PORT}/api/clients`);
  console.log(`   http://localhost:${PORT}/api/computers`);
  console.log(`   http://localhost:${PORT}/api/employees`);
  console.log(`   http://localhost:${PORT}/api/services`);
  console.log(`   http://localhost:${PORT}/api/products`);
  console.log(`   http://localhost:${PORT}/api/stats`);
  console.log(`   http://localhost:${PORT}/api/test`);
});